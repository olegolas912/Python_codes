from qiskit import QuantumCircuit, transpile
from qiskit_aer import Aer
import matplotlib.pyplot as plt

# Количество кубитов (n=2 для поиска в пространстве из 4 состояний)
n = 2

# Создаем квантовую схему с 2 кубитами и 2 классическими битами
grover_circuit = QuantumCircuit(n, n)

# -----------------------------------------------------------
# Этап 1: Инициализация суперпозиции
# Применяем H-гейты ко всем кубитам, чтобы получить равномерную суперпозицию:
#   H|0> = 1/sqrt(2)(|0> + |1>)
# Таким образом, состояние кубитов становится:
#   |ψ> = 1/2 (|00> + |01> + |10> + |11>)
grover_circuit.h(range(n))

# -----------------------------------------------------------
# Этап 2: Oracle (Оракул)
# Задача оракула – инвертировать фазу искомого состояния.
# Мы ищем состояние |11>. Для этого применим CZ-гейт, который меняет знак только у |11>.
#
# Действие CZ-гейта:
#   CZ |xy> = (-1)^(x*y) |xy>
# Таким образом, для |11> (x=1, y=1): (-1)^(1*1) = -1, а для остальных состояний знак не меняется.
grover_circuit.cz(0, 1)

# -----------------------------------------------------------
# Этап 3: Диффузор (инверсия относительно среднего)
# Цель диффузора – усилить амплитуду отмеченного состояния.
# Его реализация для n кубитов:
#   - Применить H-гейты ко всем кубитам
#   - Применить X-гейты ко всем кубитам
#   - Применить много-контролируемый Z-гейт (для 2 кубитов можно реализовать через CZ-гейт) с
#     дополнительным преобразованием: H на одном из кубитов до и после CX
#   - Применить X-гейты ко всем кубитам
#   - Применить H-гейты ко всем кубитам
#
# Для 2 кубитов диффузор можно записать следующим образом:
grover_circuit.h(range(n))
grover_circuit.x(range(n))
# Реализация отражения относительно |00>:
grover_circuit.h(1)
grover_circuit.cx(0, 1)
grover_circuit.h(1)
grover_circuit.x(range(n))
grover_circuit.h(range(n))

# -----------------------------------------------------------
# Этап 4: Измерение
# После одного прохода алгоритма Гровера (оптимальное число итераций для N=4 равно 1)
# измеряем кубиты, и с высокой вероятностью получаем состояние |11>.
grover_circuit.measure(range(n), range(n))

# -----------------------------------------------------------
# Компиляция и симуляция
simulator = Aer.get_backend('aer_simulator')
compiled_circuit = transpile(grover_circuit, simulator)
job = simulator.run(compiled_circuit, shots=1024)
result = job.result()
counts = result.get_counts()

# Выводим результаты
print("Результаты измерения:")
print(counts)

# Визуализация результатов
plt.bar(counts.keys(), counts.values(), color='blue')
plt.xlabel("Состояние")
plt.ylabel("Количество")
plt.title("Результаты алгоритма Гровера (поиск |11>)")
plt.show()
